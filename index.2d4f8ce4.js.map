{"mappings":"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","sources":["<anon>","src/js/index.ts","src/js/list/listController.ts","src/js/list/listModel.ts","src/js/list/listView.ts"],"sourcesContent":["const $1a8c61e1a0ff7eab$var$apiUrl = \"https://api.themoviedb.org/3/\";\nconst $1a8c61e1a0ff7eab$var$apiUrlImage = \"https://image.tmdb.org/t/p/original/\";\nconst $1a8c61e1a0ff7eab$var$authToken = \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5NGUyZWRjM2ZiODU0ZWQ4Nzc0NDk2YjNjOGFhOWFiNSIsInN1YiI6IjYyMTEyOTU4YTI0MjMyMDAxY2JkYmQ0MyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.pVI8_DJuhZaTHVCuDuNQaThNVLBUEQ2A9t9yOx4kc3k\";\nconst $1a8c61e1a0ff7eab$var$options = {\n    method: \"GET\",\n    headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${$1a8c61e1a0ff7eab$var$authToken}`\n    }\n};\nconst $1a8c61e1a0ff7eab$export$abcf9bca77844134 = async (page)=>{\n    try {\n        const url = `${$1a8c61e1a0ff7eab$var$apiUrl}movie/now_playing?language=es_ES&page=${page}`;\n        const response = await fetch(url, $1a8c61e1a0ff7eab$var$options);\n        const data = await response.json();\n        console.log(data);\n        const genresData = await $1a8c61e1a0ff7eab$var$getGenres();\n        const films = await $1a8c61e1a0ff7eab$var$getParseData(data, genresData);\n        return films;\n    } catch (error) {\n        throw new Error(error);\n    }\n};\nconst $1a8c61e1a0ff7eab$var$getGenres = async ()=>{\n    try {\n        const url = `${$1a8c61e1a0ff7eab$var$apiUrl}genre/movie/list?language=es`;\n        const response = await fetch(url, $1a8c61e1a0ff7eab$var$options);\n        const data = await response.json();\n        console.log(\"gender:\", data);\n        return data;\n    } catch (error) {\n        throw new Error(error);\n    }\n};\nconst $1a8c61e1a0ff7eab$var$getGenreNamesByIds = async (genreIds, genresData)=>{\n    return genreIds.map((id)=>{\n        const genre = genresData.genres.find((genre)=>genre.id === id);\n        return genre ? genre.name : \"G\\xe9nero desconocido\";\n    });\n};\nconst $1a8c61e1a0ff7eab$var$getParseData = async (data, genresData)=>{\n    let films = [];\n    for (const element of data.results){\n        let film = {\n            id: element.id,\n            title: element.title,\n            overview: element.overview,\n            release_date: new Date(element.release_date),\n            genre: await $1a8c61e1a0ff7eab$var$getGenreNamesByIds(element.genre_ids, genresData),\n            image: element.poster_path !== null ? `${$1a8c61e1a0ff7eab$var$apiUrlImage}${element.poster_path}` : \"No hay imagen\"\n        };\n        films.push(film);\n    }\n    return films;\n};\n\n\nconst $64f4478110b184a2$export$5f16c92464781569 = (film, listWrapper)=>{\n    const renderGenrers = (genrers)=>{\n        return genrers.map((genrer)=>`<span class=\"badge rounded-pill bg-dark g-3\">${genrer}</span>`).join(\" \");\n    };\n    listWrapper.innerHTML = `\n        <div class=\"card\">\n            <div class=\"bg-image hover-overlay ripple\" data-mdb-ripple-color=\"light\">\n                <img src=\"${film.image}?as=webp&width=500\" class=\"img-fluid\" />\n                <a href=\"#!\">\n                <div class=\"mask\" style=\"background-color: rgba(251, 251, 251, 0.15)\"></div>\n                </a>\n            </div>\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">${film.title}</h5>\n                <p class=\"card-text\">\n                    ${film.overview}\n                </p>\n            </div>\n            <div class=\"card-footer\">\n                ${renderGenrers(film.genre)}\n            </div>\n        </div>\n    `;\n    return listWrapper;\n};\n\n\nconst $2fe76cdc84e10db6$export$5060af7baf5cca60 = async (listWrapper)=>{\n    const loadFilms = async (page)=>{\n        if (page === undefined) page = 1;\n        const films = await (0, $1a8c61e1a0ff7eab$export$abcf9bca77844134)(page);\n        console.log(films);\n        return films;\n    };\n    const handlerListBuild = (films)=>{\n        const listContainer = document.createElement(\"div\");\n        listContainer.classList.add(\"container\");\n        for (const film of films){\n            const cardFilmElement = document.createElement(\"div\");\n            cardFilmElement.classList.add(\"col\");\n            const cardFilm = (0, $64f4478110b184a2$export$5f16c92464781569)(film, cardFilmElement);\n            listWrapper.appendChild(cardFilm);\n        }\n        const filmsInPage = listWrapper.querySelectorAll(\".col\");\n        const lastFilmInPage = filmsInPage[filmsInPage.length - 1];\n    };\n    const handlerLoadPage = ()=>{\n        let pages = 1;\n        const observerLoadPage = new IntersectionObserver(async (entries)=>{\n            console.log(entries);\n            if (!entries[0].isIntersecting) return;\n            pages += 1;\n            console.log(\"Ejecuto una accion cuando el elemento esta visible\" + entries[0].target);\n            const films = await loadFilms(pages);\n            handlerListBuild(films);\n            lastItem(observerLoadPage);\n        });\n        lastItem(observerLoadPage);\n    };\n    const lastItem = (observerLoadPage)=>{\n        if (observerLoadPage) observerLoadPage.disconnect(); // Desconectar el observador anterior antes de crear uno nuevo\n        const filmsInPage = listWrapper.querySelectorAll(\".col\");\n        console.log(filmsInPage);\n        const lastFilmInPage = filmsInPage[filmsInPage.length - 1];\n        console.log(lastFilmInPage);\n        observerLoadPage.observe(lastFilmInPage);\n    };\n    const films = await loadFilms();\n    handlerListBuild(films);\n    handlerLoadPage();\n};\n\n\nconst $2c792daab4dd69d2$var$errorHtlml = {\n    type: \"error\",\n    message: 'Element with ID \"list-wrapper\" not found.'\n};\nconst $2c792daab4dd69d2$var$error = {\n    type: \"error\",\n    message: 'Element with ID \"list-wrapper\" not found.'\n};\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const listWrapper = document.getElementById(\"list-wrapper\");\n    if (!listWrapper) throw $2c792daab4dd69d2$var$error;\n    (0, $2fe76cdc84e10db6$export$5060af7baf5cca60)(listWrapper);\n});\n\n\n//# sourceMappingURL=index.2d4f8ce4.js.map\n","import { listController } from \"./list/listController\";\n//import { CustomError } from \"./utils/interface\";\ninterface CustomError {\n    type: string,\n    message: string,\n}\n\nconst errorHtlml:CustomError = {\n    type: 'error',  \n    message: 'Element with ID \"list-wrapper\" not found.'\n}\nconst error: CustomError = { type:'error' , message:'Element with ID \"list-wrapper\" not found.'};\n\ndocument.addEventListener(\"DOMContentLoaded\", () : void  => {\n    const listWrapper: HTMLElement | null = document.getElementById('list-wrapper') as HTMLElement\n\n    if (!listWrapper) throw error;\n    listController(listWrapper)\n})","import { getLastFilms } from \"./listModel\";\nimport { buildListFilms } from \"./listView\";\nimport { Film } from \"../utils/interface\";\nexport const listController = async(listWrapper: HTMLElement) :Promise<void> => {\n    \n    \n    const loadFilms =  async (page?: number): Promise<Film[]> => {\n        if (page === undefined){\n            page = 1\n        }\n        const films =  await getLastFilms(page)\n        console.log(films);\n        return films\n    }\n\n    const handlerListBuild = (films: Film[]) : void =>{\n        const listContainer = document.createElement('div');\n        listContainer.classList.add('container');\n\n        for (const film of films) {\n            const cardFilmElement = document.createElement('div');\n            cardFilmElement.classList.add('col')\n            const cardFilm = buildListFilms(film, cardFilmElement);\n            listWrapper.appendChild(cardFilm);\n        } \n        const filmsInPage = listWrapper.querySelectorAll('.col') as NodeListOf<HTMLDivElement>;\n        const lastFilmInPage = filmsInPage[filmsInPage.length - 1]\n        \n\n    }\n\n    const handlerLoadPage = () :void => {\n        let pages:number = 1\n        \n        const observerLoadPage = new IntersectionObserver(async (entries) => {\n            console.log(entries)\n            if(!entries[0].isIntersecting){return}\n            pages += 1\n            console.log('Ejecuto una accion cuando el elemento esta visible' + entries[0].target);\n            const films = await loadFilms(pages)\n            handlerListBuild(films)\n            \n            lastItem(observerLoadPage)\n        })\n\n        lastItem(observerLoadPage)\n        \n    }\n\n    const lastItem = (observerLoadPage) :void => {\n        if (observerLoadPage) {\n            observerLoadPage.disconnect(); // Desconectar el observador anterior antes de crear uno nuevo\n        }\n        const filmsInPage = listWrapper.querySelectorAll('.col') as NodeListOf<HTMLDivElement>;\n        console.log(filmsInPage);\n        const lastFilmInPage = filmsInPage[filmsInPage.length - 1]\n        \n        console.log(lastFilmInPage)\n        observerLoadPage.observe(lastFilmInPage) \n       \n    }\n\n    const films = await loadFilms()\n    handlerListBuild(films)\n    handlerLoadPage()\n\n}","import { Film } from \"../utils/interface\"\nconst apiUrl = process.env.API_BASE_URL\nconst apiUrlImage = process.env.API_BASE_IMAGE_URL\nconst authToken = process.env.AUTH_TOKEN\n\nconst options: object = {\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${authToken}`\n    }\n}\n\n\nexport const getLastFilms = async (page?: number) : Promise<any> => {\n    try {\n        const url = `${apiUrl}movie/now_playing?language=es_ES&page=${page}`\n        const response = await fetch(url, options)\n        const data = await response.json()\n        console.log(data);\n        const genresData = await getGenres()\n        const films = await getParseData(data, genresData) \n        return films   \n\n    } catch (error) {\n        throw new Error(error)\n    }\n}\n\nconst getGenres = async () : Promise<any> => {\n    try {\n        const url = `${apiUrl}genre/movie/list?language=es`\n        const response = await  fetch(url, options)\n        const data = await response.json()\n        console.log('gender:', data);\n        return data\n        \n    } catch (error) {\n        throw new Error(error);\n        \n    }\n}\n\nconst getGenreNamesByIds = async (genreIds: number[], genresData:object) => {\n    return genreIds.map(id => {\n        const genre = genresData.genres.find(genre => genre.id === id);\n        return genre ? genre.name : 'Género desconocido';\n    });\n}\n\nconst getParseData = async (data: object, genresData: object) =>  {\n    let films =  [] as Film[]\n    for (const element of data.results) {\n        let film : Film =  {\n            id: element.id,\n            title: element.title,\n            overview: element.overview,\n            release_date: new Date(element.release_date),\n            genre: await getGenreNamesByIds(element.genre_ids, genresData),\n            image: element.poster_path !== null ? `${apiUrlImage}${element.poster_path}` : \"No hay imagen\",\n        }\n        films.push(film)        \n    };\n    return films\n}\n","import { Film } from \"../utils/interface\"\nexport const buildListFilms = (film: Film, listWrapper:HTMLElement): HTMLElement => {\n    const renderGenrers = (genrers:string[]): string =>{\n        return genrers.map(genrer =>  `<span class=\"badge rounded-pill bg-dark g-3\">${genrer}</span>` ).join(\" \")\n     }\n\n    listWrapper.innerHTML =  `\n        <div class=\"card\">\n            <div class=\"bg-image hover-overlay ripple\" data-mdb-ripple-color=\"light\">\n                <img src=\"${film.image}?as=webp&width=500\" class=\"img-fluid\" />\n                <a href=\"#!\">\n                <div class=\"mask\" style=\"background-color: rgba(251, 251, 251, 0.15)\"></div>\n                </a>\n            </div>\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">${film.title}</h5>\n                <p class=\"card-text\">\n                    ${film.overview}\n                </p>\n            </div>\n            <div class=\"card-footer\">\n                ${renderGenrers(film.genre)}\n            </div>\n        </div>\n    `\n\n    return listWrapper\n}"],"names":["$1a8c61e1a0ff7eab$var$apiUrl","$1a8c61e1a0ff7eab$var$options","method","headers","accept","Authorization","$1a8c61e1a0ff7eab$export$abcf9bca77844134","page","url","response","fetch","data","json","console","log","genresData","$1a8c61e1a0ff7eab$var$getGenres","$1a8c61e1a0ff7eab$var$getParseData","error","Error","$1a8c61e1a0ff7eab$var$getGenreNamesByIds","genreIds","map","id","genre","genres","find","name","films","element","results","film","title","overview","release_date","Date","genre_ids","image","poster_path","push","$64f4478110b184a2$export$5f16c92464781569","listWrapper","innerHTML","genrers","genrer","join","$2fe76cdc84e10db6$export$5060af7baf5cca60","loadFilms","undefined","handlerListBuild","listContainer","document","createElement","classList","add","cardFilmElement","cardFilm","appendChild","filmsInPage","querySelectorAll","length","lastItem","observerLoadPage","disconnect","lastFilmInPage","observe","handlerLoadPage","pages","IntersectionObserver","entries","isIntersecting","target","$2c792daab4dd69d2$var$error","type","message","addEventListener","getElementById"],"version":3,"file":"index.2d4f8ce4.js.map"}