{"mappings":"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","sources":["src/js/index.ts","src/js/list/listController.ts","src/js/list/listModel.ts","src/js/list/listView.ts"],"sourcesContent":["import { listController } from \"./list/listController\";\n//import { CustomError } from \"./utils/interface\";\ninterface CustomError {\n    type: string,\n    message: string,\n}\n\nconst errorHtlml:CustomError = {\n    type: 'error',  \n    message: 'Element with ID \"list-wrapper\" not found.'\n}\nconst error: CustomError = { type:'error' , message:'Element with ID \"list-wrapper\" not found.'};\n\ndocument.addEventListener(\"DOMContentLoaded\", () : void  => {\n    const listWrapper: HTMLElement | null = document.getElementById('list-wrapper') as HTMLElement\n\n    if (!listWrapper) throw error;\n    listController(listWrapper)\n})","import { getLastFilms } from \"./listModel\";\nimport { buildListFilms } from \"./listView\";\nimport { Film } from \"../utils/interface\";\nexport const listController = async(listWrapper: HTMLElement) :Promise<void> => {\n    \n    \n    const loadFilms =  async (page?: number): Promise<Film[]> => {\n        if (page === undefined){\n            page = 1\n        }\n        const films =  await getLastFilms(page)\n        console.log(films);\n        return films\n    }\n\n    const handlerListBuild = (films: Film[]) : void =>{\n        const listContainer = document.createElement('div');\n        listContainer.classList.add('container');\n\n        for (const film of films) {\n            const cardFilmElement = document.createElement('div');\n            cardFilmElement.classList.add('col')\n            const cardFilm = buildListFilms(film, cardFilmElement);\n            listWrapper.appendChild(cardFilm);\n        } \n        const filmsInPage = listWrapper.querySelectorAll('.col') as NodeListOf<HTMLDivElement>;\n        const lastFilmInPage = filmsInPage[filmsInPage.length - 1]\n        \n\n    }\n\n    const handlerLoadPage = () :void => {\n        let pages:number = 1\n        \n        const observerLoadPage = new IntersectionObserver(async (entries) => {\n            console.log(entries)\n            if(!entries[0].isIntersecting){return}\n            pages += 1\n            console.log('Ejecuto una accion cuando el elemento esta visible' + entries[0].target);\n            const films = await loadFilms(pages)\n            handlerListBuild(films)\n            \n            lastItem(observerLoadPage)\n        })\n\n        lastItem(observerLoadPage)\n        \n    }\n\n    const lastItem = (observerLoadPage) :void => {\n        if (observerLoadPage) {\n            observerLoadPage.disconnect(); // Desconectar el observador anterior antes de crear uno nuevo\n        }\n        const filmsInPage = listWrapper.querySelectorAll('.col') as NodeListOf<HTMLDivElement>;\n        console.log(filmsInPage);\n        const lastFilmInPage = filmsInPage[filmsInPage.length - 1]\n        \n        console.log(lastFilmInPage)\n        observerLoadPage.observe(lastFilmInPage) \n       \n    }\n\n    const films = await loadFilms()\n    handlerListBuild(films)\n    handlerLoadPage()\n\n}","import { Film } from \"../utils/interface\"\nconst apiUrl = process.env.API_BASE_URL\nconst apiUrlImage = process.env.API_BASE_IMAGE_URL\nconst authToken = process.env.AUTH_TOKEN\n\nconst options: object = {\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${authToken}`\n    }\n}\n\n\nexport const getLastFilms = async (page?: number) : Promise<any> => {\n    try {\n        const url = `${apiUrl}movie/now_playing?language=es_ES&page=${page}`\n        const response = await fetch(url, options)\n        const data = await response.json()\n        console.log(data);\n        const genresData = await getGenres()\n        const films = await getParseData(data, genresData) \n        return films   \n\n    } catch (error) {\n        throw new Error(error)\n    }\n}\n\nconst getGenres = async () : Promise<any> => {\n    try {\n        const url = `${apiUrl}genre/movie/list?language=es`\n        const response = await  fetch(url, options)\n        const data = await response.json()\n        console.log('gender:', data);\n        return data\n        \n    } catch (error) {\n        throw new Error(error);\n        \n    }\n}\n\nconst getGenreNamesByIds = async (genreIds: number[], genresData:object) => {\n    return genreIds.map(id => {\n        const genre = genresData.genres.find(genre => genre.id === id);\n        return genre ? genre.name : 'GÃ©nero desconocido';\n    });\n}\n\nconst getParseData = async (data: object, genresData: object) =>  {\n    let films =  [] as Film[]\n    for (const element of data.results) {\n        let film : Film =  {\n            id: element.id,\n            title: element.title,\n            overview: element.overview,\n            release_date: new Date(element.release_date),\n            genre: await getGenreNamesByIds(element.genre_ids, genresData),\n            image: element.poster_path !== null ? `${apiUrlImage}${element.poster_path}` : \"No hay imagen\",\n        }\n        films.push(film)        \n    };\n    return films\n}\n","import { Film } from \"../utils/interface\"\nexport const buildListFilms = (film: Film, listWrapper:HTMLElement): HTMLElement => {\n    const renderGenrers = (genrers:string[]): string =>{\n        return genrers.map(genrer =>  `<span class=\"badge rounded-pill bg-dark g-3\">${genrer}</span>` ).join(\" \")\n     }\n\n    listWrapper.innerHTML =  `\n        <div class=\"card\">\n            <div class=\"bg-image hover-overlay ripple\" data-mdb-ripple-color=\"light\">\n                <img src=\"${film.image}?as=webp&width=500\" class=\"img-fluid\" />\n                <a href=\"#!\">\n                <div class=\"mask\" style=\"background-color: rgba(251, 251, 251, 0.15)\"></div>\n                </a>\n            </div>\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">${film.title}</h5>\n                <p class=\"card-text\">\n                    ${film.overview}\n                </p>\n            </div>\n            <div class=\"card-footer\">\n                ${renderGenrers(film.genre)}\n            </div>\n        </div>\n    `\n\n    return listWrapper\n}"],"names":[],"version":3,"file":"index.js.map"}